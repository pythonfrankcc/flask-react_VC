{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","markComplete","e","console","log","this","id","title","style","type","onChange","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","React","headerStyle","textAlign","Header","to","AddTodo","state","onSubmit","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","uuid","v4","filter","newTodo","exact","path","render","component","ReactDOM","document","getElementById"],"mappings":"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","file":"js/main.e26cf324.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n\tgetStyle = () => {\r\n\t\treturn {\r\n\t\t\tbackground : '#f4f4f4',\r\n\t\t\tpadding : '10px',\r\n\t\t\tborderBottom : '1px #ccc dotted',\r\n\t\t\ttextDecoration: this.props.todo.completed ?\r\n\t\t\t'line-through' : 'none',\r\n\t\t}\r\n\t}\r\n\t// when calling the method like this you use an e for event and since it is an  external method you have to bind it\r\n\tmarkComplete = (e) => {\r\n\t\tconsole.log(this.props)\r\n\t}\r\n\trender(){\r\n\t\tconst {id,title } = this.props.todo;\r\n\t\treturn(\r\n\t\t\t// the color here is light grey\r\n\t\t\t// <div style = {itemStyle}> this is when you are using variables\r\n\t\t\t<div style = { this.getStyle() }>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />{''}\r\n\t\t\t\t    {title}\r\n\t\t\t\t    <button onClick={this.props.delTodo.bind(this,id)} style= {btnStyle}>x</button>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\n// this defining of prop types is because it is a good practise \r\nTodoItem.propTypes = {\r\n\ttodo:PropTypes.object.isRequired\r\n}\r\nconst btnStyle = {\r\n\tbackground:'#ff0000',\r\n\tcolor:'#fff',\r\n\tborder:'none',\r\n\tpadding:'5px 9px',\r\n\tborderRadius:'50%',\r\n\tcursor:'pointer',\r\n\tfloat:'right',\r\n}\r\n\r\n// const itemStyle = {\r\n// \t backgroundColor: '#f4f4f4' \r\n// }\r\nexport default TodoItem","// this is going to be a class based component just like App.js\r\nimport React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass Todos extends React.Component {\r\n\t// checking whether you have captured the state props from main App.js\r\n\t// console.log(this.props.todos)\r\n   // this is just for testing\r\n   // markComplete = () => {\r\n   // \tconsole.log('Hello')\r\n   // }\r\n  render() {\r\n    // console.log(this.props.todos)\r\n    // when mapping we create a list and each list should have its own unique id thus we give the id by using todo id\r\n    return this.props.todos.map((todo)=>(\r\n    \t<TodoItem key={todo.id} todo={todo} markComplete= {this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    \t));\r\n  }\r\n}\r\n\r\n// this defining of prop types is because it is a good practise \r\nTodos.propTypes = {\r\n\ttodos:PropTypes.array.isRequired\r\n}\r\nexport default Todos;","// this is a function based component\r\nimport React from 'react'\r\n// using the link in place of the href in the header\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Header() {\r\n\treturn(\r\n\t\t<header style ={headerStyle}>\r\n\t\t\t<h1>TodoList</h1>\r\n\t\t\t<Link style={{color:'#fff',textDecoration:'none'}} to=\"/\">Home</Link> | <Link style={{color:'#fff',textDecoration:'none'}} to=\"/about\">About</Link>\r\n\t\t</header>\r\n\r\n\t\t);\r\n\r\n}\r\nconst headerStyle={\r\n\tbackground:'#333',\r\n\tcolor:'#fff',\r\n\ttextAlign:'center',\r\n\tpadding:'10px'\r\n}\r\n\r\nexport default Header;","// this will be a class based component\r\nimport React, { Component } from 'react';\r\n\r\n\r\nclass AddTodo extends Component{\r\n\tstate={\r\n\t\ttitle:''\r\n\t}\r\n\tonSubmit = (e) => {\r\n\t\t// just like vanilla JS its going to try to submit to the default file and the way to prevent this is through the below\r\n\t\te.preventDefault();\r\n\t\t// this represents what we are changing\r\n\t\tthis.props.addTodo(this.state.title);\r\n\t\t// this sets the state back to nothing on submitting\r\n\t\tthis.setState({title: ''});\r\n\t}\r\n\t// using the e.target.value means you are setting the title to whatever you type in and as long as the e.target.name is equivalent to whatever you are targetting just in the case that you have many input values\r\n\tonChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<form onSubmit ={ this.onSubmit } style={{ display:'flex' }}>\r\n\t\t\t<input\r\n\t\t\t\ttype =\"text\"\r\n\t\t\t\tname=\"title\"\r\n\t\t\t\tstyle={{ flex: '10', padding: '5px' }}\r\n\t\t\t\tplaceholder=\"Add Todo ...\" \r\n\t\t\t\tvalue={this.state.title}\r\n\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"submit\"\r\n\t\t\t\tvalue=\"Submit\"\r\n\t\t\t\tclassName=\"btn\"\r\n\t\t\t\tstyle={{ flex: '1' }}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\nexport default AddTodo","import React from 'react'\r\n\r\nfunction About() {\r\n\treturn(\r\n\t\t<React.Fragment>\r\n\t\t<h1>\r\n\t\tAbout\r\n\t\t</h1>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n}\r\nexport default About;","// the App is the main component and the way you embed another component into the main component is by using tags\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from \"./components/Todos\";\nimport Header from './components/layout/Header';\nimport AddTodo from \"./components/AddTodo\";\nimport About from \"./components/pages/About\";\nimport uuid from 'uuid'\n\n\nclass App extends Component {\n  state = {\n    todos: \n    [\n      {\n        id: uuid.v4(), \n        title: \"Looking up at the statistics on farming\",\n        completed: true\n      },\n      {\n        id: uuid.v4(), \n        title: \"Learning React as a front-end Library\",\n        completed: false\n      },\n      {\n        id: uuid.v4(), \n        title: \"Learning how python can be the backend to a react based frontend\",\n        completed: false\n      }                   \n    ] \n  }\n  // Toggle Completed \n  markComplete = (id) => {\n    this.setState({ todos:this.state.todos.map(todo =>{\n      if(todo.id ===id){\n        todo.completed = !todo.completed\n      }\n      return todo\n    }) });\n  }\n  // Delete Todo usinhg the spread operator to filter\n  delTodo= (id) =>{\n    this.setState({ todos:[...this.state.todos.filter(todo =>todo.id!== id)]\n\n    })\n  }\n  //  Add Todo\n  addTodo = (title) =>{\n    // this is what is going to be added as it is the variable newTodo\n    const newTodo = {\n      id: uuid.v4(),\n      // we do this since in ES6 if they are identical we dont have to keep repeating ourselves\n      title,\n      completed: false\n\n    }\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  }\n  render(){\n    // this is ultimately for testing using the react developer tools\n    // console.log(this.state.todos)\n    return (\n      // this is JSX\n      // in this we have to render two components so the best way to do this is to use the Route that we have imported from the ReactBrowser\n      // the exact part helps to prevent overlapping between the pages\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path =\"/\" render={props =>(\n              <React.Fragment>\n                <AddTodo addTodo ={this.addTodo} />\n                <Todos todos= {this.state.todos} markComplete= {this.markComplete} delTodo={this.delTodo} />\n              </React.Fragment>\n\n              )}/>\n            <Route path =\"/about\" component={About}/>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n       // embedding a component into the main app component by using a tag\n      // different components can have their own states but we have have a state that is going to be used by different components\n      // in the below example the todos are passed as props in the todos component","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// The service worker is used for offline purposes and progressive web apps\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}